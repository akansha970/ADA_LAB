#include<stdio.h>
#define infinity 999
int parent[20];

int find(int i)
{
	while (parent[i] != i)
		i = parent[i];
	return i;
}

void union(int i, int j)
{
	int a = find(i);
	int b = find(j);
	parent[a] = b;
}


void kruskal(int cost[][50], int V)
{
	int mincost = 0; 


	for (int i = 0; i < V; i++)
		parent[i] = i;

	int edge_count = 0;
	while (edge_count < V - 1) {
		int min = infinity, a = -1, b = -1;
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (find(i) != find(j) && cost[i][j] < min) {
					min = cost[i][j];
					a = i;
					b = j;
				}
			}
		}

		union(a, b);
		printf("Edge %d:(%d, %d) cost:%d \n",
			edge_count++, a, b, min);
		mincost += min;
	}
	printf("\n Minimum cost= %d \n", mincost);
}

int main()
{
	int cost[50][50],V;
    int i,j;
    printf("Enter the number of vertices:\n");
    scanf("%d",&V);
    printf("Enter the cost matrix of the graph:(enter 999 for infinity)\n");
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        {
            scanf("%d",&cost[i][j]);
        }
    }
	kruskal(cost, V);

	return 0;
}
