#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#define infinity 999
int minKey(int key[], bool mstSet[],int V)
{
	int min = infinity, min_index;

	for (int v = 0; v < V; v++)
		if (mstSet[v] == false && key[v] < min)
			min = key[v], min_index = v;

	return min_index;
}

int printMST(int parent[], int graph[50][50], int V)
{
	printf("Edge \tWeight\n");
	for (int i = 1; i < V; i++)
		printf("%d - %d \t%d \n", parent[i], i,
			graph[i][parent[i]]);
}


void prim(int graph[50][50], int n)
{
    int V;
    V=n;

	int parent[V];
	int key[V];
	bool mstSet[V];

	for (int i = 0; i < V; i++)
		key[i] = infinity, mstSet[i] = false;

	key[0] = 0;
	parent[0] = -1;
	for (int count = 0; count < V - 1; count++) {

		int u = minKey(key, mstSet, V);
		mstSet[u] = true;
		for (int v = 0; v < V; v++)
			if (graph[u][v] && mstSet[v] == false
				&& graph[u][v] < key[v])
				parent[v] = u, key[v] = graph[u][v];
	}

	printMST(parent, graph, V);
}


int main()
{
    int graph[50][50],V;
    int i,j;
    printf("Enter the number of vertices:\n");
    scanf("%d",&V);
    printf("Enter the weight matrix of the graph:(enter 0 for unreachable nodes)\n");
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        {
            scanf("%d",&graph[i][j]);
        }
    }

	prim(graph, V);
	return 0;
}
