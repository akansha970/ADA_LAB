#include <limits.h>
#include <stdbool.h>
#include <stdio.h>

int minDistance(int dist[], bool sptSet[],int n)
{
    int V=n;
	int min = INT_MAX, min_index;

	for (int v = 0; v < V; v++)
		if (sptSet[v] == false && dist[v] <= min)
			min = dist[v], min_index = v;

	return min_index;
}


void printSolution(int dist[],int n)
{
    int V=n;
	printf("Vertex \t\t Distance from Source\n");
	for (int i = 0; i < V; i++)
		printf("%d \t\t\t\t %d\n", i, dist[i]);
}


void dijkstra(int graph[50][50], int src,int n)
{
    int V=n;
	int dist[V];

	bool sptSet[V]; 
	for (int i = 0; i < V; i++)
		dist[i] = INT_MAX, sptSet[i] = false;

	dist[src] = 0;


	for (int count = 0; count < V - 1; count++) {
		int u = minDistance(dist, sptSet, V);
		sptSet[u] = true;
		for (int v = 0; v < V; v++)

			if (!sptSet[v] && graph[u][v]
				&& dist[u] != INT_MAX
				&& dist[u] + graph[u][v] < dist[v])
				dist[v] = dist[u] + graph[u][v];
	}

	printSolution(dist, V);
}


int main()
{

	int graph[50][50],V;
    int i,j;
    printf("Enter the number of vertices:\n");
    scanf("%d",&V);
    printf("Enter the weight matrix of the graph:(enter 0 for unreachable nodes)\n");
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        {
            scanf("%d",&graph[i][j]);
        }
    }
	dijkstra(graph, 0, V);
	return 0;
}
